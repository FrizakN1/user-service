// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "user-service/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// ChangeStatus provides a mock function with given fields: user
func (_m *UserRepository) ChangeStatus(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_ChangeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatus'
type UserRepository_ChangeStatus_Call struct {
	*mock.Call
}

// ChangeStatus is a helper method to define mock.On call
//   - user *models.User
func (_e *UserRepository_Expecter) ChangeStatus(user interface{}) *UserRepository_ChangeStatus_Call {
	return &UserRepository_ChangeStatus_Call{Call: _e.mock.On("ChangeStatus", user)}
}

func (_c *UserRepository_ChangeStatus_Call) Run(run func(user *models.User)) *UserRepository_ChangeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_ChangeStatus_Call) Return(_a0 error) *UserRepository_ChangeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_ChangeStatus_Call) RunAndReturn(run func(*models.User) error) *UserRepository_ChangeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeUserPassword provides a mock function with given fields: user
func (_m *UserRepository) ChangeUserPassword(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ChangeUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_ChangeUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeUserPassword'
type UserRepository_ChangeUserPassword_Call struct {
	*mock.Call
}

// ChangeUserPassword is a helper method to define mock.On call
//   - user *models.User
func (_e *UserRepository_Expecter) ChangeUserPassword(user interface{}) *UserRepository_ChangeUserPassword_Call {
	return &UserRepository_ChangeUserPassword_Call{Call: _e.mock.On("ChangeUserPassword", user)}
}

func (_c *UserRepository_ChangeUserPassword_Call) Run(run func(user *models.User)) *UserRepository_ChangeUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_ChangeUserPassword_Call) Return(_a0 error) *UserRepository_ChangeUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_ChangeUserPassword_Call) RunAndReturn(run func(*models.User) error) *UserRepository_ChangeUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *models.User
func (_e *UserRepository_Expecter) CreateUser(user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(user *models.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(*models.User) error) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// EditUser provides a mock function with given fields: user
func (_m *UserRepository) EditUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for EditUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_EditUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditUser'
type UserRepository_EditUser_Call struct {
	*mock.Call
}

// EditUser is a helper method to define mock.On call
//   - user *models.User
func (_e *UserRepository_Expecter) EditUser(user interface{}) *UserRepository_EditUser_Call {
	return &UserRepository_EditUser_Call{Call: _e.mock.On("EditUser", user)}
}

func (_c *UserRepository_EditUser_Call) Run(run func(user *models.User)) *UserRepository_EditUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_EditUser_Call) Return(_a0 error) *UserRepository_EditUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_EditUser_Call) RunAndReturn(run func(*models.User) error) *UserRepository_EditUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuperAdmin provides a mock function with given fields: admin
func (_m *UserRepository) GetSuperAdmin(admin *models.User) error {
	ret := _m.Called(admin)

	if len(ret) == 0 {
		panic("no return value specified for GetSuperAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_GetSuperAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuperAdmin'
type UserRepository_GetSuperAdmin_Call struct {
	*mock.Call
}

// GetSuperAdmin is a helper method to define mock.On call
//   - admin *models.User
func (_e *UserRepository_Expecter) GetSuperAdmin(admin interface{}) *UserRepository_GetSuperAdmin_Call {
	return &UserRepository_GetSuperAdmin_Call{Call: _e.mock.On("GetSuperAdmin", admin)}
}

func (_c *UserRepository_GetSuperAdmin_Call) Run(run func(admin *models.User)) *UserRepository_GetSuperAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_GetSuperAdmin_Call) Return(_a0 error) *UserRepository_GetSuperAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_GetSuperAdmin_Call) RunAndReturn(run func(*models.User) error) *UserRepository_GetSuperAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: user
func (_m *UserRepository) GetUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - user *models.User
func (_e *UserRepository_Expecter) GetUser(user interface{}) *UserRepository_GetUser_Call {
	return &UserRepository_GetUser_Call{Call: _e.mock.On("GetUser", user)}
}

func (_c *UserRepository_GetUser_Call) Run(run func(user *models.User)) *UserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_GetUser_Call) Return(_a0 error) *UserRepository_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_GetUser_Call) RunAndReturn(run func(*models.User) error) *UserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with no fields
func (_m *UserRepository) GetUsers() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
func (_e *UserRepository_Expecter) GetUsers() *UserRepository_GetUsers_Call {
	return &UserRepository_GetUsers_Call{Call: _e.mock.On("GetUsers")}
}

func (_c *UserRepository_GetUsers_Call) Run(run func()) *UserRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepository_GetUsers_Call) Return(_a0 []models.User, _a1 error) *UserRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUsers_Call) RunAndReturn(run func() ([]models.User, error)) *UserRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByIds provides a mock function with given fields: ids
func (_m *UserRepository) GetUsersByIds(ids []int32) ([]models.User, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByIds")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) ([]models.User, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]int32) []models.User); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUsersByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByIds'
type UserRepository_GetUsersByIds_Call struct {
	*mock.Call
}

// GetUsersByIds is a helper method to define mock.On call
//   - ids []int32
func (_e *UserRepository_Expecter) GetUsersByIds(ids interface{}) *UserRepository_GetUsersByIds_Call {
	return &UserRepository_GetUsersByIds_Call{Call: _e.mock.On("GetUsersByIds", ids)}
}

func (_c *UserRepository_GetUsersByIds_Call) Run(run func(ids []int32)) *UserRepository_GetUsersByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int32))
	})
	return _c
}

func (_c *UserRepository_GetUsersByIds_Call) Return(_a0 []models.User, _a1 error) *UserRepository_GetUsersByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUsersByIds_Call) RunAndReturn(run func([]int32) ([]models.User, error)) *UserRepository_GetUsersByIds_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: user
func (_m *UserRepository) Login(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - user *models.User
func (_e *UserRepository_Expecter) Login(user interface{}) *UserRepository_Login_Call {
	return &UserRepository_Login_Call{Call: _e.mock.On("Login", user)}
}

func (_c *UserRepository_Login_Call) Run(run func(user *models.User)) *UserRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_Login_Call) Return(_a0 error) *UserRepository_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_Login_Call) RunAndReturn(run func(*models.User) error) *UserRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
