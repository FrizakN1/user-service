// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

type Hasher_Expecter struct {
	mock *mock.Mock
}

func (_m *Hasher) EXPECT() *Hasher_Expecter {
	return &Hasher_Expecter{mock: &_m.Mock}
}

// Encrypt provides a mock function with given fields: value
func (_m *Hasher) Encrypt(value string) (string, error) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hasher_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type Hasher_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - value string
func (_e *Hasher_Expecter) Encrypt(value interface{}) *Hasher_Encrypt_Call {
	return &Hasher_Encrypt_Call{Call: _e.mock.On("Encrypt", value)}
}

func (_c *Hasher_Encrypt_Call) Run(run func(value string)) *Hasher_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Hasher_Encrypt_Call) Return(_a0 string, _a1 error) *Hasher_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Hasher_Encrypt_Call) RunAndReturn(run func(string) (string, error)) *Hasher_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateBytes provides a mock function with given fields: n
func (_m *Hasher) GenerateBytes(n int) ([]byte, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hasher_GenerateBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBytes'
type Hasher_GenerateBytes_Call struct {
	*mock.Call
}

// GenerateBytes is a helper method to define mock.On call
//   - n int
func (_e *Hasher_Expecter) GenerateBytes(n interface{}) *Hasher_GenerateBytes_Call {
	return &Hasher_GenerateBytes_Call{Call: _e.mock.On("GenerateBytes", n)}
}

func (_c *Hasher_GenerateBytes_Call) Run(run func(n int)) *Hasher_GenerateBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Hasher_GenerateBytes_Call) Return(_a0 []byte, _a1 error) *Hasher_GenerateBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Hasher_GenerateBytes_Call) RunAndReturn(run func(int) ([]byte, error)) *Hasher_GenerateBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateHash provides a mock function with given fields: value
func (_m *Hasher) GenerateHash(value string) (string, error) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for GenerateHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hasher_GenerateHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateHash'
type Hasher_GenerateHash_Call struct {
	*mock.Call
}

// GenerateHash is a helper method to define mock.On call
//   - value string
func (_e *Hasher_Expecter) GenerateHash(value interface{}) *Hasher_GenerateHash_Call {
	return &Hasher_GenerateHash_Call{Call: _e.mock.On("GenerateHash", value)}
}

func (_c *Hasher_GenerateHash_Call) Run(run func(value string)) *Hasher_GenerateHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Hasher_GenerateHash_Call) Return(_a0 string, _a1 error) *Hasher_GenerateHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Hasher_GenerateHash_Call) RunAndReturn(run func(string) (string, error)) *Hasher_GenerateHash_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateString provides a mock function with given fields: n
func (_m *Hasher) GenerateString(n int) (string, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GenerateString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hasher_GenerateString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateString'
type Hasher_GenerateString_Call struct {
	*mock.Call
}

// GenerateString is a helper method to define mock.On call
//   - n int
func (_e *Hasher_Expecter) GenerateString(n interface{}) *Hasher_GenerateString_Call {
	return &Hasher_GenerateString_Call{Call: _e.mock.On("GenerateString", n)}
}

func (_c *Hasher_GenerateString_Call) Run(run func(n int)) *Hasher_GenerateString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Hasher_GenerateString_Call) Return(_a0 string, _a1 error) *Hasher_GenerateString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Hasher_GenerateString_Call) RunAndReturn(run func(int) (string, error)) *Hasher_GenerateString_Call {
	_c.Call.Return(run)
	return _c
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
