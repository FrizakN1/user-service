// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with no fields
func (_m *Database) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Database_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *Database_Expecter) Connect() *Database_Connect_Call {
	return &Database_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *Database_Connect_Call) Run(run func()) *Database_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Connect_Call) Return(_a0 error) *Database_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Connect_Call) RunAndReturn(run func() error) *Database_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuery provides a mock function with given fields: key
func (_m *Database) GetQuery(key string) (*sql.Stmt, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetQuery")
	}

	var r0 *sql.Stmt
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*sql.Stmt, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.Stmt); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Database_GetQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuery'
type Database_GetQuery_Call struct {
	*mock.Call
}

// GetQuery is a helper method to define mock.On call
//   - key string
func (_e *Database_Expecter) GetQuery(key interface{}) *Database_GetQuery_Call {
	return &Database_GetQuery_Call{Call: _e.mock.On("GetQuery", key)}
}

func (_c *Database_GetQuery_Call) Run(run func(key string)) *Database_GetQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Database_GetQuery_Call) Return(_a0 *sql.Stmt, _a1 bool) *Database_GetQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetQuery_Call) RunAndReturn(run func(string) (*sql.Stmt, bool)) *Database_GetQuery_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareQuery provides a mock function with no fields
func (_m *Database) PrepareQuery() []error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrepareQuery")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Database_PrepareQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareQuery'
type Database_PrepareQuery_Call struct {
	*mock.Call
}

// PrepareQuery is a helper method to define mock.On call
func (_e *Database_Expecter) PrepareQuery() *Database_PrepareQuery_Call {
	return &Database_PrepareQuery_Call{Call: _e.mock.On("PrepareQuery")}
}

func (_c *Database_PrepareQuery_Call) Run(run func()) *Database_PrepareQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_PrepareQuery_Call) Return(_a0 []error) *Database_PrepareQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_PrepareQuery_Call) RunAndReturn(run func() []error) *Database_PrepareQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
