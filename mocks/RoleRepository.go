// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "user-service/models"

	mock "github.com/stretchr/testify/mock"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

type RoleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleRepository) EXPECT() *RoleRepository_Expecter {
	return &RoleRepository_Expecter{mock: &_m.Mock}
}

// GetRole provides a mock function with given fields: role
func (_m *RoleRepository) GetRole(role *models.Role) error {
	ret := _m.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Role) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRepository_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type RoleRepository_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - role *models.Role
func (_e *RoleRepository_Expecter) GetRole(role interface{}) *RoleRepository_GetRole_Call {
	return &RoleRepository_GetRole_Call{Call: _e.mock.On("GetRole", role)}
}

func (_c *RoleRepository_GetRole_Call) Run(run func(role *models.Role)) *RoleRepository_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Role))
	})
	return _c
}

func (_c *RoleRepository_GetRole_Call) Return(_a0 error) *RoleRepository_GetRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleRepository_GetRole_Call) RunAndReturn(run func(*models.Role) error) *RoleRepository_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with no fields
func (_m *RoleRepository) GetRoles() ([]models.Role, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Role, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Role); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type RoleRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
func (_e *RoleRepository_Expecter) GetRoles() *RoleRepository_GetRoles_Call {
	return &RoleRepository_GetRoles_Call{Call: _e.mock.On("GetRoles")}
}

func (_c *RoleRepository_GetRoles_Call) Run(run func()) *RoleRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RoleRepository_GetRoles_Call) Return(_a0 []models.Role, _a1 error) *RoleRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleRepository_GetRoles_Call) RunAndReturn(run func() ([]models.Role, error)) *RoleRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoleRepository creates a new instance of RoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleRepository {
	mock := &RoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
