// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "user-service/models"

	mock "github.com/stretchr/testify/mock"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

type SessionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepository) EXPECT() *SessionRepository_Expecter {
	return &SessionRepository_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: user
func (_m *SessionRepository) CreateSession(user *models.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepository_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionRepository_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - user *models.User
func (_e *SessionRepository_Expecter) CreateSession(user interface{}) *SessionRepository_CreateSession_Call {
	return &SessionRepository_CreateSession_Call{Call: _e.mock.On("CreateSession", user)}
}

func (_c *SessionRepository_CreateSession_Call) Run(run func(user *models.User)) *SessionRepository_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *SessionRepository_CreateSession_Call) Return(_a0 string, _a1 error) *SessionRepository_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepository_CreateSession_Call) RunAndReturn(run func(*models.User) (string, error)) *SessionRepository_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: hash
func (_m *SessionRepository) DeleteSession(hash string) error {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionRepository_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - hash string
func (_e *SessionRepository_Expecter) DeleteSession(hash interface{}) *SessionRepository_DeleteSession_Call {
	return &SessionRepository_DeleteSession_Call{Call: _e.mock.On("DeleteSession", hash)}
}

func (_c *SessionRepository_DeleteSession_Call) Run(run func(hash string)) *SessionRepository_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionRepository_DeleteSession_Call) Return(_a0 error) *SessionRepository_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_DeleteSession_Call) RunAndReturn(run func(string) error) *SessionRepository_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserSessions provides a mock function with given fields: userID
func (_m *SessionRepository) DeleteUserSessions(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_DeleteUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserSessions'
type SessionRepository_DeleteUserSessions_Call struct {
	*mock.Call
}

// DeleteUserSessions is a helper method to define mock.On call
//   - userID int
func (_e *SessionRepository_Expecter) DeleteUserSessions(userID interface{}) *SessionRepository_DeleteUserSessions_Call {
	return &SessionRepository_DeleteUserSessions_Call{Call: _e.mock.On("DeleteUserSessions", userID)}
}

func (_c *SessionRepository_DeleteUserSessions_Call) Run(run func(userID int)) *SessionRepository_DeleteUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *SessionRepository_DeleteUserSessions_Call) Return(_a0 error) *SessionRepository_DeleteUserSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_DeleteUserSessions_Call) RunAndReturn(run func(int) error) *SessionRepository_DeleteUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: hash
func (_m *SessionRepository) GetSession(hash string) *models.Session {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(string) *models.Session); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	return r0
}

// SessionRepository_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type SessionRepository_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - hash string
func (_e *SessionRepository_Expecter) GetSession(hash interface{}) *SessionRepository_GetSession_Call {
	return &SessionRepository_GetSession_Call{Call: _e.mock.On("GetSession", hash)}
}

func (_c *SessionRepository_GetSession_Call) Run(run func(hash string)) *SessionRepository_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionRepository_GetSession_Call) Return(_a0 *models.Session) *SessionRepository_GetSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_GetSession_Call) RunAndReturn(run func(string) *models.Session) *SessionRepository_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSession provides a mock function with no fields
func (_m *SessionRepository) LoadSession() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepository_LoadSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSession'
type SessionRepository_LoadSession_Call struct {
	*mock.Call
}

// LoadSession is a helper method to define mock.On call
func (_e *SessionRepository_Expecter) LoadSession() *SessionRepository_LoadSession_Call {
	return &SessionRepository_LoadSession_Call{Call: _e.mock.On("LoadSession")}
}

func (_c *SessionRepository_LoadSession_Call) Run(run func()) *SessionRepository_LoadSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SessionRepository_LoadSession_Call) Return(_a0 error) *SessionRepository_LoadSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepository_LoadSession_Call) RunAndReturn(run func() error) *SessionRepository_LoadSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
